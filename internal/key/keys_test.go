// Code generated by events-generate; DO NOT EDIT.
package key

import (
	"github.com/stretchr/testify/require"
	"testing"
)

func TestAllowedIP(t *testing.T) {
	var v AllowedIP
	require.Equal(t, "allowed_ip", v.String())
}

func TestEndpoint(t *testing.T) {
	var v Endpoint
	require.Equal(t, "endpoint", v.String())
}

func TestErrno(t *testing.T) {
	var v Errno
	require.Equal(t, "errno", v.String())
}

func TestFWMark(t *testing.T) {
	var v FWMark
	require.Equal(t, "fwmark", v.String())
}

func TestGet(t *testing.T) {
	var v Get
	require.Equal(t, "get", v.String())
}

func TestLastHandshakeTimeNSec(t *testing.T) {
	var v LastHandshakeTimeNSec
	require.Equal(t, "last_handshake_time_nsec", v.String())
}

func TestLastHandshakeTimeSec(t *testing.T) {
	var v LastHandshakeTimeSec
	require.Equal(t, "last_handshake_time_sec", v.String())
}

func TestListenPort(t *testing.T) {
	var v ListenPort
	require.Equal(t, "listen_port", v.String())
}

func TestPersistentKeepalive(t *testing.T) {
	var v PersistentKeepalive
	require.Equal(t, "persistent_keepalive_interval", v.String())
}

func TestPresharedKey(t *testing.T) {
	var v PresharedKey
	require.Equal(t, "preshared_key", v.String())
}

func TestPrivateKey(t *testing.T) {
	var v PrivateKey
	require.Equal(t, "private_key", v.String())
}

func TestProtocolVersion(t *testing.T) {
	var v ProtocolVersion
	require.Equal(t, "protocol_version", v.String())
}

func TestPublicKey(t *testing.T) {
	var v PublicKey
	require.Equal(t, "public_key", v.String())
}

func TestRXBytes(t *testing.T) {
	var v RXBytes
	require.Equal(t, "rx_bytes", v.String())
}

func TestRemove(t *testing.T) {
	var v Remove
	require.Equal(t, "remove", v.String())
}

func TestReplaceAllowedIPs(t *testing.T) {
	var v ReplaceAllowedIPs
	require.Equal(t, "replace_allowed_ips", v.String())
}

func TestReplacePeers(t *testing.T) {
	var v ReplacePeers
	require.Equal(t, "replace_peers", v.String())
}

func TestSet(t *testing.T) {
	var v Set
	require.Equal(t, "set", v.String())
}

func TestTXBytes(t *testing.T) {
	var v TXBytes
	require.Equal(t, "tx_bytes", v.String())
}

func TestUpdateOnly(t *testing.T) {
	var v UpdateOnly
	require.Equal(t, "update_only", v.String())
}
